from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import ContentType, Message, CallbackQuery
from pytz import timezone
from keyboards.inline.user_inline import price_kr, make_confirmation_keyboard_kr
from states.user_state import User_register_kr, User_lang
from keyboards.default.user_keyboard import description_keyboard_kr, allow_keyboard_kr, phone_number_keyboard_kr
from loader import dp, db, bot


@dp.message_handler(text="–ö–∏—Ä–∏–ª")
async def start_kiril(message: types.Message):
    s = 0
    all_user = await db.select_all_users()
    for user in all_user:
        if user[0] == str(message.from_user.id):
            await message.answer(text="–°–∏–∑ –±–æ—Ç–¥–∞–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∏–∑!\n\n"
                                      f"–¢–∞—ä—Ä–∏—Ñ–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥üëá",
                                 reply_markup=description_keyboard_kr)
            await User_register_kr.description_kr.set()
            s += 1
    if s == 0:
        await message.answer("–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º!\n\n"
                             "–ú–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥ –ö–∞–º–æ–ª–∞ –®–∞–∫–∞—Ä–æ–≤–∞–Ω–∏–Ω–≥ —ë—Ä–¥–∞–º—á–∏—Å–∏ <b>–ú–µ“≥—Ä–∏–±–æ–Ω–º–∞–Ω‚ù§Ô∏è</b>\n\n"
                             "–°–∏–∑–≥–∞ –ú–ê–¢–†–ò–¶–ê —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç—Å–∏–æ–Ω –¥–∞—Å—Ç—É—Ä–∏–¥–∞ “õ–∞—Ç–Ω–∞—à–∏—à–∏–Ω–≥–∏–∑ —É—á—É–Ω —ë—Ä–¥–∞–º –±–µ—Ä–∞–º–∞–Ω!\n\n"
                             "–ö–µ–ª–∏–Ω–≥, —Ç–∞–Ω–∏—à–≤–æ–ª–∞–º–∏–∑")
        await message.answer("–°–∏–∑–≥–∞ –±–∏—Ä –Ω–µ—á—Ç–∞ —Å–∞–≤–æ–ª–ª–∞—Ä –±–µ—Ä–∞–º–∞–Ω, —Ä–æ–∑–∏–º–∏—Å–∏–∑?\n\n"
                             "–†–æ–∑–∏ –±—û–ª—Å–∞–Ω–≥–∏–∑, –ø–∞—Å—Ç–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥‚ù§Ô∏èüëáüèª", reply_markup=allow_keyboard_kr)


@dp.message_handler(CommandStart(), state=User_register_kr.all_states)
async def cmd_start(message: types.Message):
    s = 0
    all_user = await db.select_all_users()
    for user in all_user:
        if user[0] == str(message.from_user.id):
            await message.answer(text="–°–∏–∑ –±–æ—Ç–¥–∞–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∏–∑!\n\n"
                                      f"–¢–∞—ä—Ä–∏—Ñ–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥üëá",
                                 reply_markup=description_keyboard_kr)
            await User_register_kr.description_kr.set()
            s += 1
    if s == 0:
        await message.answer("–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º!\n\n"
                             "–ú–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥ –ö–∞–º–æ–ª–∞ –®–∞–∫–∞—Ä–æ–≤–∞–Ω–∏–Ω–≥ —ë—Ä–¥–∞–º—á–∏—Å–∏ <b>–ú–µ“≥—Ä–∏–±–æ–Ω–º–∞–Ω‚ù§Ô∏è</b>\n\n"
                             "–°–∏–∑–≥–∞ –ú–ê–¢–†–ò–¶–ê —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç—Å–∏–æ–Ω –¥–∞—Å—Ç—É—Ä–∏–¥–∞ “õ–∞—Ç–Ω–∞—à–∏—à–∏–Ω–≥–∏–∑ —É—á—É–Ω —ë—Ä–¥–∞–º –±–µ—Ä–∞–º–∞–Ω!\n\n"
                             "–ö–µ–ª–∏–Ω–≥, —Ç–∞–Ω–∏—à–≤–æ–ª–∞–º–∏–∑")
        await message.answer("–°–∏–∑–≥–∞ –±–∏—Ä –Ω–µ—á—Ç–∞ —Å–∞–≤–æ–ª–ª–∞—Ä –±–µ—Ä–∞–º–∞–Ω, —Ä–æ–∑–∏–º–∏—Å–∏–∑?\n\n"
                             "–†–æ–∑–∏ –±—û–ª—Å–∞–Ω–≥–∏–∑, –ø–∞—Å—Ç–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥‚ù§Ô∏èüëáüèª", reply_markup=allow_keyboard_kr)


@dp.message_handler(text="–†–æ–∑–∏–º–∞–Ω‚úÖ")
async def allow_user(message: types.Message):
    await message.answer(text="–ò—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥")
    await User_register_kr.full_name_kr.set()


@dp.message_handler(state=User_register_kr.full_name_kr)
async def full_name_user(message: types.Message, state: FSMContext):
    await state.update_data(
        {
            "full_name": message.text
        }
    )
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥üëá", reply_markup=phone_number_keyboard_kr)
    await User_register_kr.phone_number_kr.set()


@dp.message_handler(state=User_register_kr.phone_number_kr, content_types=ContentType.CONTACT)
async def process_phone_number(message: Message, state: FSMContext):
    await state.update_data(
        {
            "phone_number": message.contact.phone_number
        }
    )
    user_info = await state.get_data()
    full_name_ = user_info["full_name"]
    phone_number = user_info["phone_number"]
    await db.add_user(
        id=str(message.from_user.id),
        full_name=full_name_,
        phone_number=str(phone_number),
        date_time=str(datetime.now(tz=timezone('Asia/Tashkent'))).split('.')[0],
        user_name=message.from_user.username
    )
    await message.answer("–¢–∞—ä—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=description_keyboard_kr)
    await User_register_kr.description_kr.set()


@dp.message_handler(state=User_register_kr.phone_number_kr)
async def process_phone_number_test(message: Message, state: FSMContext):
    await message.answer(text="–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º —é–±–æ—Ä–∏—à —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±—û—Å–∏–Ω–≥üëá")


@dp.message_handler(state=User_register_kr.all_states, text="–ë–∏–∑–Ω–µ—Å")
@dp.message_handler(text="–ë–∏–∑–Ω–µ—Å")
async def process_description_standart(message: Message, state: FSMContext):
    await state.update_data(
        {
            "description": message.text
        }
    )
    await message.answer(text="\t<b>–ë–ò–ó–ù–ï–°</b>\n\n"
                              "<b>–ö—É—Ä—Å –Ω–∞—Ä—Ö–∏</b> <i>999.000 —Å—û–º</i>\n", reply_markup=price_kr)
    await User_register_kr.price_kr.set()


@dp.callback_query_handler(text='price', state=User_register_kr.price_kr)
async def process_price(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(text="üí≥–ö–∞—Ä—Ç–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏:\n\n"
                                   "<b>–ö–∞—Ä—Ç–∞ —Ä–∞“õ–∞–º–∏</b>: <code>5614 6820 0657 7847</code>\n"
                                   "<b>–ö–∞—Ä—Ç–∞ —ç–≥–∞—Å–∏</b>: <i>–ö–∞–º–æ–ª–∞ –®–∞–∫–∞—Ä–æ–≤–∞</i>\n\n"
                                   "–ü—É–ª –ú–∏“õ–¥–æ—Ä–∏ —Ç—û“ì—Ä–∏–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏–Ω–≥ –≤–∞ —Ç—û–ª–æ–≤ —á–µ–∫–∏–Ω–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∏–Ω–∏ —à—É –µ—Ä–≥–∞ —é–±–æ—Ä–∏–Ω–≥!")
    await User_register_kr.check_state_kr.set()


@dp.message_handler(state=User_register_kr.check_state_kr, content_types=types.ContentType.PHOTO)
async def process_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    user_info = await state.get_data()
    description = user_info["description"]
    user_all = await db.select_all_users()
    if description == '–ë–∏–∑–Ω–µ—Å':
        for user in user_all:
            if user[0] == str(message.from_user.id):
                await db.add_sell_course_user(
                    id=str(message.from_user.id),
                    phone_number=user[2],
                    full_name=user[1],
                    description=description,
                    course_sell_time=str(datetime.now(tz=timezone('Asia/Tashkent'))).split('.')[0],
                    price="999.000",
                    user_name=message.from_user.username
                )
                for user_ in await db.select_all_sell_course_users():
                    if user_[0] == user[0]:
                        await state.update_data(
                            {
                                "phone_number": user[2],
                                "full_name": user[1],
                                "data_time": user_[4],
                                "price": user_[6]
                            }
                        )
        user_info_1 = await state.get_data()
        await bot.send_photo(
            chat_id=6089744035, photo=file_id, caption=(
                f"<b>Foydalanuvchi id</b>: <i>{message.from_user.id}\n</i>"
                f"<b>Telefon nomer</b>: <i>{user_info_1.get('phone_number')}\n</i>"
                f"<b>Foydalanuvchi Ismi</b>: <i>{user_info_1.get('full_name')}\n</i>"
                f"<b>Ta'rif</b>: <i>{user_info_1.get('description')}\n</i>"
                f"<b>To'lov summasi</b>: <i>{user_info_1.get('price')}\n</i>"
                f"<b>To'lov vaqti</b>:<i>{user_info_1.get('data_time')}\n </i>"
                f"<b>Foydalanuvchi nomi</b>:<i> <a href='https://t.me/{user_info_1.get('phone_number')}'>{message.from_user.full_name}</a></i>"
            ), reply_markup=await make_confirmation_keyboard_kr(message.from_user.id)
        )
    if description == '–í–ò–ü':
        for user in user_all:
            if user[0] == str(message.from_user.id):
                await db.add_sell_course_user(
                    id=str(message.from_user.id),
                    phone_number=user[2],
                    full_name=user[1],
                    description=description,
                    course_sell_time=str(datetime.now(tz=timezone('Asia/Tashkent'))).split('.')[0],
                    price="5.555.000",
                    user_name=message.from_user.username
                )
                for user_ in await db.select_all_sell_course_users():
                    if user_[0] == user[0]:
                        await state.update_data(
                            {
                                "phone_number": user[2],
                                "full_name": user[1],
                                "data_time": user_[4],
                                "price": user_[6]
                            }
                        )
        user_info_1 = await state.get_data()
        await bot.send_photo(
            chat_id=6089744035, photo=file_id, caption=(
                f"<b>Foydalanuvchi id</b>: <i>{message.from_user.id}\n</i>"
                f"<b>Telefon nomer</b>: <i>{user_info_1.get('phone_number')}\n</i>"
                f"<b>Foydalanuvchi Ismi</b>: <i>{user_info_1.get('full_name')}\n</i>"
                f"<b>Ta'rif</b>: <i>{user_info_1.get('description')}\n</i>"
                f"<b>To'lov summasi</b>: <i>{user_info_1.get('price')}\n</i>"
                f"<b>To'lov vaqti</b>:<i>{user_info_1.get('data_time')}\n </i>"
                f"<b>Foydalanuvchi nomi</b>:<i> <a href='https://t.me/{user_info_1.get('phone_number')}'>{message.from_user.full_name}</a></i>"
            ), reply_markup=await make_confirmation_keyboard_kr(message.from_user.id)
        )
    await message.answer("–¢—û–ª–æ–≤–∏–Ω–≥–∏–∑ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç –ú–µ–Ω–µ–∂–µ—Ä–∏–º–∏–∑–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏\n\n"
                         "–¢—û–ª–æ–≤–∏–Ω–≥–∏–∑ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —û—Ç–≥–∞–Ω –±—û–ª—Å–∞ 24 —Å–æ–∞—Ç –∏—á–∏–¥–∞ —Å–∏–∑–≥–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–ª–∞—Ä–∏–º–∏–∑ –ë–æ—Ç –æ—Ä“õ–∞–ª–∏ —ë–ø–∏“õ –≥—É—Ä—É“≥ –ª–∏–Ω–∫–∏–Ω–∏ —é–±–æ—Ä–∞–¥–∏!")
    await message.answer(text="–¢–∞–Ω–ª–æ–≤–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç!\n\n"
                              "“≤–∞—ë—Ç–∏–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç—Å–∏—è–ª–∞—Ä–≥–∞ —Ç–∞–π—ë—Ä–ª–∞–Ω–∏–Ω–≥!‚ú®‚ú®‚ú®")
    await message.answer("–¢–∞—ä—Ä–∏—Ñ–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥üëá", reply_markup=description_keyboard_kr)
    await User_register_kr.description_kr.set()


@dp.message_handler(state=User_register_kr.all_states, text="–í–ò–ü")
@dp.message_handler(text="–í–ò–ü")
async def process_description_biznes(message: Message, state: FSMContext):
    await state.update_data(
        {
            "description": message.text
        }
    )
    await message.answer(text="\t<b>–í–ò–ü</b>\n\n"
                              "<b>–ö—É—Ä—Å –Ω–∞—Ä—Ö–∏</b> <i>5.555.000 —Å—û–º</i>\n", reply_markup=price_kr)
    await User_register_kr.price_kr.set()


@dp.callback_query_handler(text="back_menu", state=User_register_kr.price_kr)
async def process_back_menu(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("–¢–∞—ä—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=description_keyboard_kr)
    await User_register_kr.description_kr.set()
